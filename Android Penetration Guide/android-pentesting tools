# Android Pentest Toolkit — Quick, Practical

> A concise, well-organized GitHub README for students and red-teamers who want a fast path to Android pentesting. Covers the **tools you should master first**, full tool categories, and a recommended learning path — designed to be dropped into a repo and used as a cheat-sheet.

---

## 🔥 TL;DR — The Top 7 (highest ROI)

Focus on these first; they give the most capability with the least overhead.

1. **ADB (Android Debug Bridge)** — device shell, install/uninstall APKs, pull files, `logcat`.
2. **scrcpy** — realtime screen mirror & control (requires USB debugging).
3. **Burp Suite (or mitmproxy)** — intercept & manipulate app HTTP(S) traffic.
4. **MobSF (Mobile Security Framework)** — automated static + dynamic APK analysis.
5. **jadx / JADX GUI** — decompile APK → readable Java code.
6. **apktool** — unpack/repack APKs; inspect `AndroidManifest.xml` and smali.
7. **Frida (+ Objection)** — runtime instrumentation & function hooking.

---

## 🧭 Tooling by purpose (compact)

### Recon & host/device interaction

* **ADB** — must-know.
* **fastboot** — bootloader operations (flashing/unlocking)
* **scrcpy / Vysor** — screen control & mirroring
* **Termux (on-device)** — in-device shell & scripts
* **Network Info / IP Tools** — quick device network details

### Network / traffic analysis

* **Burp Suite (Community / Pro)** — proxy, repeater, intruder (Pro)
* **mitmproxy** — scriptable CLI + web interface
* **Wireshark / tcpdump** — packet capture & analysis
* **Fiddler** — additional HTTP proxy option

### Static analysis & reverse-engineering

* **MobSF** — automated analysis + dynamic testing
* **jadx / JADX GUI** — decompile APKs
* **apktool** — decode resources & smali for tweaks
* **dex2jar + JD-GUI** — dex → jar → Java view
* **Bytecode Viewer** — alternative decompilers

### Dynamic analysis / runtime hooking

* **Frida (frida-server, frida-tools)** — runtime hooks
* **Objection** — Frida-based mobile exploration (bypass checks, dump files)
* **Xposed Framework** — runtime hooks (root required)
* **adb logcat** — live logs

### Payload & exploitation (lab-only / simulated)

* **Metasploit / msfvenom** — generate test/reverse APKs & listeners
* **apk-mitm** — patching tools (SSL pin removal in permissive labs)
* **Drozer** — historical Android attack framework (less active)

### Persistence & privilege escalation (only when allowed)

* **Magisk** — systemless root & persistence modules
* **TWRP** — custom recovery for flashing/backups
* **root binaries / su tooling** — escalations & management

### Forensics & evidence collection

* **Autopsy / Sleuth Kit** — forensic analysis
* **ADB backup tools / forensic toolkits** — data extraction
* **Cellebrite / Magnet AXIOM** — commercial deep extraction
* **DB Browser for SQLite** — inspect app DBs

### Emulators & practice platforms

* **Android Studio emulator** — official testing environment
* **Genymotion** — fast alternative
* **TryHackMe / HackTheBox** — hands-on labs and rooms

### Helpers / build & signing

* **Android Studio** — build/test APKs, signers, emulators
* **jarsigner / apksigner / keytool** — APK signing tools
* **Gradle / VSCode** — dev tooling for building test apps

### Remote-control / GUI alternatives

* **TeamViewer Host / AirDroid** — remote-control (commercial)
* **Vysor** — mirroring + controls

### Premium / commercial tools (know them conceptually)

* **Burp Suite Professional**, **Cellebrite UFED**, **Magnet AXIOM**, **NowSecure / Veracode**

---

## 🛠️ Quick recommended learning path (tools)

1. **ADB → scrcpy** (device access & control)
2. **Burp** (proxying mobile traffic)
3. **MobSF → jadx → apktool** (static analysis)
4. **Frida / Objection** (runtime hooks)
5. **Wireshark** (network capture & analysis)
6. After the above: **msfvenom**, **Magisk**, advanced forensics

---

## 📚 How to practice (mini-projects)

* **Project A:** Intercept & modify an API call of a sample app in an emulator using Burp. Document the impact.
* **Project B:** Static analysis of an APK with MobSF → find exported components in the manifest → confirm with jadx.
* **Project C:** Write a tiny benign test APK that sends a heartbeat to your local server; install on emulator and show persistence.

---

## ⚡ Pro tips (what separates the rookies from the pros)

* *Image first.* Always create a backup before touching anything.
* *Emulator-first:* test every script and hook on an emulator before touching a real device.
* *Two paths:* be ready to pivot between ADB-based access and test-APK-based persistence depending on whether USB debugging is allowed.
* *Document everything:* timestamps, screenshots, hashes — graders love a forensic-first workflow.
* *Keep test apps minimal & signed:* a tiny transparent heartbeat app is all you need for persistence demos.

---

## 🎯 One-page cheat-sheet (what to master this week)

* ADB: pull files, `logcat`, install/uninstall APKs
* scrcpy: mirror & control
* Burp: set up proxy + install CA on device
* MobSF: run static scan & read top findings
* jadx / apktool: open an APK & inspect manifest
* Frida: run a basic hook on an emulator
* Wireshark: capture device traffic while using an app

---

## 📦 Repo structure suggestion

```
/cheatsheets
/ok-sample-apks
/frida-scripts
/mobsf-reports
/lab-notes.md
README.md (this file)
```

---

## 🧾 License

Use for study & authorized testing only. Respect law & scope. (Replace this with your org/team license as needed.)

---

Made with ⚙️ & ☕ — enjoy the craft. If you want a printable PDF or a one-page poster version of this README, say the word and I’ll generate it.
